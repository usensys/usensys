[{"path":"https://github.com/usensys/usensys/articles/projects.html","id":"multimodel-intercomparison-project-mip","dir":"Articles","previous_headings":"","what":"Multimodel Intercomparison Project (MIP)","title":"Projects","text":"https://mip-results.shinyapps.io/mip-results/ https://github.com/gschivley/MIP_results_comparison","code":""},{"path":[]},{"path":[]},{"path":"https://github.com/usensys/usensys/articles/us26min.html","id":"model-characteristics","dir":"Articles","previous_headings":"","what":"Model characteristics","title":"US 26-zone minimal model for testing","text":"model based 26-zone model Multi-model intercomparison project. dataset prepared PowerGenome Zero Lab teams. includes 52 weeks hourly data 26 zones. Since goal MIP project compare different models, model setting basic, common capacity expansion models features simplify comparative process across models. main characteristics MIP model: 26 zones 52 weeks hourly resolution 2027 - 2050 time horizon, 2027 base year, milestones every 5 years starting 2030 clustered generation technologies variable capacity factors wind solar generators NREL’s Energy Technology Perspectives (ETP) projections technologies costs (included PowerGenome), median scenario used project age-based retirement assumptions existing capacity, early retirement allowed scenarios current policy constraints, renewable portfolio standards, deployment plans renewable energy sources, regional CO2 cap national CO2 cap rapid decline 2030. Combinations features used create different scenarios project. reproduction full model scenarios published separate repository. document focuses minimal model aggregated resources demonstration testing purposes. key difference model used MIP project “minimal” model currently available repository aggregation resources goal reduce computational time size dataset. Variable capacity factors wind solar generators clustered within zones based correlation time-series data. clustering algorithm insures aggregated capacity factors close possible original data maximum loss variability 5%. Thermal generation also gropped fuel type averaging technical economic parameters.","code":""},{"path":"https://github.com/usensys/usensys/articles/usensys.html","id":"a-minimal-example","dir":"Articles","previous_headings":"","what":"A minimal example","title":"usensys","text":"package currently includes aggregated version 26-zone model developed Model Intercomparison Project. Data original model published separate repository. simplified version lower granularity structure.","code":""},{"path":"https://github.com/usensys/usensys/articles/usensys.html","id":"load-data-for-the-26-zone-model","dir":"Articles","previous_headings":"A minimal example","what":"Load data for the 26-zone model","title":"usensys","text":"list us26min contains repositories different model elements. complete model following elements: declaration commodities declaration primary supply declaration final demand declaration technological processes generators, storage Optional elements : declaration interregional trade, transmission lines declaration international trade declaration ‘weather’ factors variable resources policy constraints, CO2 cap, capacity retirement constraints, etc.","code":"names(usensys::us26min) # the model elements with data names(usensys::calendars) # alternative calendars for the model names(usensys::horizons) # alternative horizons for the model"},{"path":"https://github.com/usensys/usensys/articles/usensys.html","id":"data","dir":"Articles","previous_headings":"A minimal example","what":"Data","title":"usensys","text":"data model including technologies, capacity factors, commodities, supply demand stored respective classes energyRt, grouped different repositories, stored package data. use us26min repository contains data 26-zone model. following step shapes model structure combining model elements single repository. model elements/objects can added replaced later specify scenarios.","code":"# Combine model elements that are used in all scenarios in a \"main\" repository attach(us26min) # attach the model elements to the environment  repo_main <- newRepository(   name = \"repo_main\",   desc = \"US 26-zone minimal model for testing\",   repo_comm, # commodities   repo_sup, # primary supply   repo_storage, # storage with weekly cycle   # repo_storage_fy, # storage with full-year cycle   repo_chargelinks, # charging and discharging capacity optimization for storage   repo_chargelinks_cn, # sets charging capacity equal to discharging capacity   repo_weather, # capacity factors for wind, solar, and hydro   repo_vre, # variable renewable energy sources: wind, solar, hydro   repo_nuclear, # nuclear generators   repo_hydroelectric, # hydroelectric generators   repo_geothermal, # geothermal generators   # thermal   repo_coal, # coal generators   repo_naturalgas, # natural gas generators   repo_other, # other generators   repo_biomass, # biomass generators   repo_hydrogen, # hydrogen technologies   # trade   repo_trade, # interregional transmission lines   # CO2CAP_US, # National CO2 cap    LOSTLOAD, # Lost load penalty   DEMELC # Load projections by zone and hour     )  detach(us26min) # detach the model elements summary(repo_main)"},{"path":"https://github.com/usensys/usensys/articles/usensys.html","id":"model","dir":"Articles","previous_headings":"A minimal example","what":"Model","title":"usensys","text":"Objects repo_main repository used scenarios stored created next step model object.","code":"# Declaration of the model mod <- newModel(   name = \"US26min\", # name of the model   desc = \"US 26-zone minimal model for testing\", # description   # Default configuration   region = usensys_maps$us26_sf$region, # names of all regions used in the model   discount = .02, # discount rate   calendar = calendars$calendar_52w, # full calendar with 52 weeks    horizon = horizons$horizon_2027_2050_by5, # default model horizon    optimizeRetirement = FALSE, # optimization of the retirement is disabled   # Data: add model elements used in all scenarios   data = repo_main ) rm(repo_main) # clean up"},{"path":"https://github.com/usensys/usensys/articles/usensys.html","id":"interpolation-and-solving-the-model","dir":"Articles","previous_headings":"A minimal example","what":"Interpolation and solving the model","title":"usensys","text":"model can solved one four steps. solve function applied model object complete four steps. large models recommended split process four steps monitor progress avoid repetition time-consuming steps interpolation solution. time required solve model can vary widely. Beyond hardware factors (processor speed, number cores, RAM size speed), solver algorithm choice play crucial roles. time writing vignette, significant performance gap commercial open-source solvers. Commercial solvers capable solving full model, including hours multi-year optimizations. Open-source solvers can used solve model sampled time-slices reasonable time frame.","code":""},{"path":"https://github.com/usensys/usensys/articles/usensys.html","id":"solving-scenarios","dir":"Articles","previous_headings":"A minimal example > Interpolation and solving the model","what":"Solving scenarios","title":"usensys","text":"example demonstrates process solving model four steps two scenarios. Reference (REF) scenario assumes policy intervention, Carbon Cap (CAP) scenario includes CO2 cap. testing purpose, model solved subset just time-slices full horizon. sampled model can solved using open-source solvers HiGHS, CBC, GLPK.","code":""},{"path":"https://github.com/usensys/usensys/articles/usensys.html","id":"interpolation-of-the-modelscenario-parameters","dir":"Articles","previous_headings":"A minimal example > Interpolation and solving the model > Solving scenarios","what":"1. Interpolation of the model/scenario parameters","title":"usensys","text":"","code":"scen_REF_test <- interpolate(   mod, # model object   name = \"REF_test\", # name of the scenario   desc = \"Test REF scenario on 4-days 6-hours data\", # description   calendar = calendars$calendar_4d_6h # replace default calendar ) summary(scen_REF_test)  scen_CAP_test <- interpolate(   mod, # model object   name = \"CAP_test\", # name of the scenario   desc = \"Test CAP scenario on 4-days 6-hours data\", # description   CO2CAP_US, # add CO2 cap   calendar = calendars$calendar_4d_6h # subset calendar )"},{"path":"https://github.com/usensys/usensys/articles/usensys.html","id":"writing-the-model-script-and-scenario-data","dir":"Articles","previous_headings":"A minimal example > Interpolation and solving the model > Solving scenarios","what":"2. Writing the model script and scenario data","title":"usensys","text":"","code":"scen_REF_test <- write_sc(   scen_REF_test, # interpolated scenario   solver = solver_options$julia_highs_barrier # (optional) replaces the default solver )  scen_CAP_test <- write_sc(   scen_CAP_test,   solver = solver_options$julia_highs_barrier # replace the default solver )"},{"path":"https://github.com/usensys/usensys/articles/usensys.html","id":"solving-the-modelscenario","dir":"Articles","previous_headings":"A minimal example > Interpolation and solving the model > Solving scenarios","what":"3. Solving the model/scenario","title":"usensys","text":"","code":"scen_REF_test <- solve(scen_REF_test, wait = FALSE)  scen_CAP_test <- solve(scen_CAP_test, wait = FALSE)  # use wait = TRUE to run scenarios sequentially"},{"path":"https://github.com/usensys/usensys/articles/usensys.html","id":"reading-the-results","dir":"Articles","previous_headings":"A minimal example > Interpolation and solving the model > Solving scenarios","what":"4. Reading the results","title":"usensys","text":"","code":"scen_REF_test <- read(scen_REF_test) scen_CAP_test <- read(scen_CAP_test)  summary(scen_REF_test) summary(scen_CAP_test)"},{"path":"https://github.com/usensys/usensys/articles/usensys.html","id":"quick-look-at-the-results","dir":"Articles","previous_headings":"A minimal example > Interpolation and solving the model","what":"Quick look at the results","title":"usensys","text":"New capacity, GW Carbon emissions, GtCO2 full list variables parameters available energyRt documentation progress. Scenario objects contain data model solution, including model script, raw interpolated inputs, results. See slotNames(scen_REF_test) help('scenario-class') details. Scenarios can saved loaded using standard R functions save load. scenarios large data, recommended save arrow-parquet format using save_scenario() function. default save scenario get_scenarios_path() directory along model script results. Loading saved scenarios can done using load_scenario() function pointing directory saved scenario. function returns scenario object separate .scen environment. However instead data, slots contain references data stored disk. data can accessed functions original scenario object Table. Transmission, new capacity, GW sampled model fully capture variability load weather-driven capacity factors renewable energy sources, useful testing purposes. allows comparing performance different solvers, well experimenting various time-slice configurations. approach offers fast way test models scenarios consumer-grade desktops laptops performing large-scale optimizations high-performance workstations cloud. choice time-slices (weeks, hours) included omitted scenario arbitrary example. several alternative subset calendars available package (data(calendars)) alternative selections time-slices (names(calendars)): calendar_52w full calendar model 52 weeks 168 hours per week, 8736 hours per year total calendar_4w - subset 4 weeks, 168 hours per week, 672 hours per year total calendar_12d - 12 days, 24 hours per day every day different month, 288 hours per year total calendar_4d_6h - reduced version calendar_4w 4 days 6 hours per day, 24 hours per year total. Calendars custom selections time-slices can created using subset_calendar() function.","code":"# Store solved scenarios in a list sns <- list(scen_REF_test, scen_CAP_test) # Objective values getData(sns, \"vObjective\", merge = TRUE) #> # A tibble: 2 × 3 #>   scenario name         value #>   <chr>    <chr>        <dbl> #> 1 REF_test vObjective 8.68e11 #> 2 CAP_test vObjective 1.20e12  ## New capacity getData(sns, \"vTechNewCap\", merge = TRUE, digits = 1, process = T) %>%   # filter out charger capacity (equal to the dis-chargers)   filter(!grepl(\"_discharger\", process)) %>%   # remove cluster and group identifiers from the process names   # (this process will be automated in the future versions of the package)   mutate(process = gsub(\"_(C|CL|FG)[0-9]+\", \"\", process)) |>   # remove \"charger\" from the process names   mutate(process = gsub(\"_charger\", \"\", process)) |>   mutate(process = gsub(\"_(C|CL|FG)[0-9]+\", \"\", process)) |>   group_by(scenario, process, year) %>%   summarise(GW = sum(value)/1e3, .groups = \"drop\") |>   ggplot() +   geom_bar(aes(x = as.factor(year), y = GW, fill = process),             stat = \"identity\") +   facet_grid(. ~ scenario) +   scale_fill_viridis_d(option = \"H\") +   labs(x = \"\") +   theme_bw() # Carbon emissions getData(sns, \"vBalance\", comm = \"CO2\", merge = TRUE) %>%   group_by(scenario, year) %>%   summarise(GtCO2 = sum(value)/1e6, .groups = \"drop\") |>   ggplot() +   geom_line(aes(x = year, y = GtCO2, color = scenario), linewidth = 1.5) +   geom_point(aes(x = year, y = GtCO2, color = scenario), size = 3) +   # scale_fill_viridis_d(option = \"H\") +   labs(x = \"\") +   theme_bw() # Save scenarios save(scen_REF_test, file = file.path(scen_REF_test@path, \"scen_REF_test.RData\")) save(scen_CAP_test, file = file.path(scen_CAP_test@path, \"scen_CAP_test.RData\")) scen_REF_test@path save_scenario(scen_REF_test)  scen_CAP_test@path save_scenario(scen_CAP_test) load_scenario(\"scenarios/REF_test_US26min_4d_6h_Y2027_2050_by5\") load_scenario(\"scenarios/CAP_test_US26min_4d_6h_Y2027_2050_by5\") ls(.scen) sns <- list(.scen$scen_REF_test, .scen$scen_CAP_test) getData(sns, \"vTradeNewCap\", merge = TRUE, digits = 0) |>   group_by(scenario, trade) |>   summarise(GW = sum(value)/1e3, .groups = \"drop\") |>   pivot_wider(names_from = scenario, values_from = GW) |>   arrange(desc(CAP_test + REF_test)) |>   head(10) |>   kableExtra::kable(caption = \"Table. Transmission, new capacity, GW\")"},{"path":"https://github.com/usensys/usensys/articles/usensys.html","id":"solving-52-week-model","dir":"Articles","previous_headings":"A minimal example","what":"Solving 52-week model","title":"usensys","text":"tbc…","code":""},{"path":"https://github.com/usensys/usensys/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Oleg Lugovoy. Author, maintainer.","code":""},{"path":"https://github.com/usensys/usensys/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lugovoy O (2024). usensys: United States ENergy SYStem optimization model (USENSYS). R package version 0.0.2.9000https://usensys.github.io/usensys/; https://github.com/usensys/usensys, https://usensys.github.io/usensys/; https://github.com/usensys/usensys.","code":"@Manual{,   title = {usensys: United States ENergy SYStem optimization model (USENSYS)},   author = {Oleg Lugovoy},   year = {2024},   note = {R package version 0.0.2.9000https://usensys.github.io/usensys/; https://github.com/usensys/usensys},   url = {https://usensys.github.io/usensys/; https://github.com/usensys/usensys}, }"},{"path":"https://github.com/usensys/usensys/index.html","id":"united-states-energy-system-optimization-model-","dir":"","previous_headings":"","what":"United States ENergy SYStem optimization model (USENSYS)","title":"United States ENergy SYStem optimization model (USENSYS)","text":"⚠️ package development. See Get started minimal working example. Docs progress: https://usensys.github.io/usensys/ USENSYS linear programming optimization model United States energy system. belongs class models known Macro Energy Models, also called Reference Energy System Models Capacity Expansion Models (particularly context electric power sector). USENSYS optimizes long-term development energy system considering alternative technological options, available resources, policy options. primary objective determine cost-optimal capacity expansion technological chains accounting current state system, resource- policy-constraints. usensys package provides R interface model, offering functions either design new versions utilize pre-configured one. enables users set inputs scenarios, run simulations, analyze outcomes. framework can particularly useful academic researchers consultants specializing energy systems policy analysis, familiar R, integrates seamlessly existing data analysis visualization tools. [Native Python Julia interfaces equivalent features consideration.]","code":""},{"path":"https://github.com/usensys/usensys/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"United States ENergy SYStem optimization model (USENSYS)","text":"usensys project driven following goals: - universal interface versatile, scalable modeling framework - Open-source accessibility, free use, development - Transparency modeling assumptions results - Community building foster collaboration - better research collective efforts. open-source models increasingly becoming standard best practice energy modeling, USENSYS aims contribute trend providing transparency accessibility.","code":""},{"path":"https://github.com/usensys/usensys/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"United States ENergy SYStem optimization model (USENSYS)","text":"Macro/Reference Energy System model, USENSYS can used simulate energy pathways optimizing energy investments multiple decades various conditions. enables scenario analysis involving different technological options, costs, policy measures, energy demand, economic structures, key assumptions. package emphasizes flexibility data model structure, adopting modular approach facilitates customization data sources model components. model built energyRt R-package, model generator includes framework approximately one hundred pre-built constraints, providing significant flexibility designing technologies, sectors, linkages. constraints activated based model scenario-specific data. Users can also add custom constraints via R interface, allowing adaptability. operational research programming required run suite models.","code":""},{"path":"https://github.com/usensys/usensys/index.html","id":"versions","dir":"","previous_headings":"","what":"Versions","title":"United States ENergy SYStem optimization model (USENSYS)","text":"Several versions USENSYS available, different stages development. versions included package differ geographical scope, regional aggregation, data sources, cases, replicate existing models developed institutions like EPA NREL. Currently, USENSYS focuses electric power sector, future versions extend economic sectors. following versions preparation release: - 26-zones: Divides United States 26 zones based NERC sub-regions. version part Multimodel Intercomparison Project (MIP) uses PowerGenome data. - 50-states: Covers 50 U.S. states, including Alaska Hawaii, data EIA NREL ATB. version facilitates integration sectors supports state-level policy analysis. - IPM: Based IPM model developed EPA, data sourced IPM NREL ATB. - IPMX: extension IPM model includes Mexican states. - ReEDS: replica ReEDS model NREL, data imported ReEDS repository.","code":""},{"path":"https://github.com/usensys/usensys/index.html","id":"data-sources","dir":"","previous_headings":"","what":"Data sources","title":"United States ENergy SYStem optimization model (USENSYS)","text":"data options include several datasets, EIA, NREL, IPM, ReEDS, MERRA2, also data assemblies/processing tools PUDL PowerGenome. package provides functions load preprocess datasets, making easier set scenarios run simulations. package designed flexible, allowing users incorporate data sources customize model needs.","code":""},{"path":"https://github.com/usensys/usensys/index.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"United States ENergy SYStem optimization model (USENSYS)","text":"run USENSYS model, need one following optimization software packages: - Julia JuMP - Python Pyomo - GLPK (MathProg/CMPL – subset AMPL) - GAMS first three options open-source free, GAMS commercial software. Large problems typically require commercial linear solver, CPLEX Gurobi, connected optimization software. Smaller models can solved open-source solvers like HiGHS, CBC, GLPK. hardware requirements depend size model solver used: Small problems: Can solved personal computer 8 GB RAM modern processor using solvers like HiGHS CBC, usually within minutes. Large problems: involving numerous zones, technologies, time periods, may require high-performance multicore computer cloud service 200 GB RAM, computation times ranging hours days.","code":""},{"path":"https://github.com/usensys/usensys/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"United States ENergy SYStem optimization model (USENSYS)","text":"can install development version usensys GitHub :","code":"# install.packages(\"pak\") pak::pkg_install(\"energyRt/energyRt\") pak::pkg_install(\"usensys/usensys\")"},{"path":"https://github.com/usensys/usensys/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"United States ENergy SYStem optimization model (USENSYS)","text":"basic example shows solve common problem: 🚧 document construction.","code":"library(usensys) ## basic example code"},{"path":"https://github.com/usensys/usensys/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://github.com/usensys/usensys/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://github.com/usensys/usensys/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://github.com/usensys/usensys/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://github.com/usensys/usensys/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://github.com/usensys/usensys/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://github.com/usensys/usensys/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://github.com/usensys/usensys/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://github.com/usensys/usensys/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://github.com/usensys/usensys/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://github.com/usensys/usensys/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://github.com/usensys/usensys/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://github.com/usensys/usensys/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://github.com/usensys/usensys/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://github.com/usensys/usensys/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://github.com/usensys/usensys/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://github.com/usensys/usensys/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://github.com/usensys/usensys/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://github.com/usensys/usensys/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://github.com/usensys/usensys/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://github.com/usensys/usensys/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"https://github.com/usensys/usensys/reference/capacity_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Capacity factors for the 26-region model. — capacity_factors","title":"Capacity factors for the 26-region model. — capacity_factors","text":"Capacity factors 26-region model.","code":""},{"path":"https://github.com/usensys/usensys/reference/capacity_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capacity factors for the 26-region model. — capacity_factors","text":"","code":"capacity_factors"},{"path":"https://github.com/usensys/usensys/reference/capacity_factors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Capacity factors for the 26-region model. — capacity_factors","text":"list dataframes: us26_mip_tol05 Capacity factors 26-region model, spatially aggregated tollerance <= 5% us26_mip_tol10 Capacity factors 26-region model, spatially aggregated tollerance <= 10%","code":""},{"path":"https://github.com/usensys/usensys/reference/capacity_factors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Capacity factors for the 26-region model. — capacity_factors","text":"","code":"require(ggplot2, quietly = T, warn.conflicts = F) require(dplyr, quietly = T, warn.conflicts = F)  usensys::capacity_factors$us26_mip_tol05$tech_group %>% unique() #> Error: 'capacity_factors' is not an exported object from 'namespace:usensys' reg_names <- usensys::capacity_factors$us26_mip_tol05$region %>% unique() #> Error: 'capacity_factors' is not an exported object from 'namespace:usensys'  # Solar usensys::capacity_factors$us26_mip_tol05 |>   filter(tech_group == \"utilitypv\", cluster == 1, year == 2030) |>   filter(region %in% sample(reg_names, 1)) |>   mutate(YDAY = Time_Index %/% 24 + 1, HOUR = Time_Index %% 24 + 1) |>   ggplot() +   geom_tile(aes(x = YDAY, y = HOUR, fill = value)) +   scale_fill_viridis_c(option = \"plasma\") +   labs(y = \"Hour of the day\", x = \"Day of the year\", fill = \"Capacity factor\") +   facet_wrap(~region, scales = \"free\") +   theme_bw() #> Error: 'capacity_factors' is not an exported object from 'namespace:usensys'  # Wind usensys::capacity_factors$us26_mip_tol05 |>   filter(tech_group == \"onshore_wind\", cluster == 1, year == 2030) |>   filter(region %in% sample(reg_names, 1)) |>   mutate(YDAY = Time_Index %/% 24 + 1, HOUR = Time_Index %% 24 + 1) |>   ggplot() +   geom_tile(aes(x = YDAY, y = HOUR, fill = value)) +   scale_fill_viridis_c(option = \"D\") +   labs(y = \"Hour of the day\", x = \"Day of the year\", fill = \"Capacity factor\") +   facet_wrap(~region, scales = \"free\") +   theme_bw() #> Error: 'capacity_factors' is not an exported object from 'namespace:usensys'"},{"path":"https://github.com/usensys/usensys/reference/usensys_maps.html","id":null,"dir":"Reference","previous_headings":"","what":"GIS/map-objects for alternative versions of the model. — usensys_maps","title":"GIS/map-objects for alternative versions of the model. — usensys_maps","text":"GIS/map-objects alternative versions model.","code":""},{"path":"https://github.com/usensys/usensys/reference/usensys_maps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GIS/map-objects for alternative versions of the model. — usensys_maps","text":"","code":"usensys_maps"},{"path":"https://github.com/usensys/usensys/reference/usensys_maps.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"GIS/map-objects for alternative versions of the model. — usensys_maps","text":"list sf-objects: us26_sf 26-region map","code":""},{"path":"https://github.com/usensys/usensys/reference/usensys_maps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GIS/map-objects for alternative versions of the model. — usensys_maps","text":"","code":"# Plot with base R plot(usensys_maps$us26_sf[\"region\"])   # Plot with ggplot2 library(ggplot2) ggplot(usensys_maps$us26_sf) + geom_sf(aes(fill = region), show.legend = F) + # geom_point(aes(x = centr_lon, y = centr_lat), color = \"red\", shape = 20) + geom_label(aes(x = centr_lon, y = centr_lat, label = region), size = 3) + scale_fill_viridis_d(option = \"H\") + labs(x = \"\", y = \"\") + theme_void()"},{"path":"https://github.com/usensys/usensys/news/index.html","id":"usensys-v002-dev","dir":"Changelog","previous_headings":"","what":"usensys v0.0.2-dev","title":"usensys v0.0.2-dev","text":"Minimal working example. 26-regions 52 weeks (reduced version Model Intercomparison Project).","code":""}]
